pipeline {

    agent none
    options {
        buildDiscarder logRotator( 
                    daysToKeepStr: '15', 
                    numToKeepStr: '10'
            )
    }

    environment {
        APP_NAME = "test"
        APP_VERSION = "0.0.0"
    }

    stages {
        
        stage('Cleanup Workspace') { 
            agent { 
                docker { image 'zerozang/based-image:1.0.0-9'}
            }
            steps {
                cleanWs()
                sh """
                echo "Cleaned Up Workspace for ${APP_NAME}"
                """
            }
        }

        stage('Code Checkout') {
            agent { 
                docker { image 'zerozang/based-image:1.0.0-9'}
            }    
                steps {
                        checkout([
                            $class: 'GitSCM', 
                            branches: [[name: '*/main']], 
                            userRemoteConfigs: [[url: 'https://github.com/maezero/challenges.git']]
                        ])
                }
        }

        stage('Code Build & Stamp Version') {
            agent { 
                docker { image 'zerozang/based-image:1.0.0-9'}
            }             
                
            steps {
                //### Stamp Versiom ####
                sh "sed -i 's/##VERSION##/${APP_VERSION}-${BUILD_NUMBER}/g' ./ci-cd-pipeline/app/html/index.html"
                sh "sed -i 's/##GIT_COMMIT##/${GIT_COMMIT}/g' ./ci-cd-pipeline/app/html/index.html"

                dir('ci-cd-pipeline') {
                    sh 'mv Dockerfile ./app/'                        
                }
        
                dir('ci-cd-pipeline/app'){
                    sh "docker build -t zerozang/${APP_NAME}:${APP_VERSION}-${BUILD_NUMBER} ."  
                }
                        
            }         
        }

        stage('Set AWS Sredential'){
            agent { 
                docker { image 'zerozang/based-image:1.0.0-9'}
            } 

            steps{
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY')]) {
                       
                    sh "aws configure set aws_access_key_id ${AWS_ACCESS_KEY}"
                }

                withCredentials([string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_KEY')]) {
                       
                    sh "aws configure set aws_secret_access_key ${AWS_SECRET_KEY}"
                }   

                sh "aws configure set default.region ap-southeast-1"

            }
        }

/*        stage('Push Image to Docker Hub') {
            agent { 
                docker { image 'zerozang/based-image:1.0.0-9'}
            } 
                
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "docker logout"
                    sh "docker login -u $USERNAME -p $PASSWORD"
                    sh "docker push zerozang/${APP_NAME}:${APP_VERSION}-${BUILD_NUMBER}"  
                }
            }         
        }
*/
        stage('Push Image to ECR Puiblic Repo') {    
            agent { 
                docker { image 'zerozang/based-image:1.0.0-9'}
            } 

            steps {
                    sh "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/a9x6t2f1"
                    sh "docker tag zerozang/${APP_NAME}:${APP_VERSION}-${BUILD_NUMBER} public.ecr.aws/a9x6t2f1/${APP_NAME}:${APP_VERSION}-${BUILD_NUMBER}"
                    sh "docker push public.ecr.aws/a9x6t2f1/${APP_NAME}:${APP_VERSION}-${BUILD_NUMBER}"  
            }         
        }
    }   
}
